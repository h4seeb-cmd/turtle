{
  
    
        "post0": {
            "title": "Student Lesson Vocabulary",
            "content": "Unit 2… Binary/Data Terms . Bits: The smallest unit of data that a computer can process and solve | Bytes: Unit of data that is 8 binary digits long | Hexadecimal: Numbering system that uses base 16 | Nibbles: 4 consectutive binary digits | Binary Numbers: Numbering system that just uses 1s and 0s | Unsigned Integer: Integers but have the property that they have a sign attached to them | Signed Integer: 32 bit data that encodes an integer in a specific range | Floating Point: Positive or negative whole numbers Binary Data Abstractions: . | Boolean: True or false statements | ASCII: American Standard Code for Information interchange, a standard data-encoding format for electronic communication between computers | Unicode: International encoding standard for use with different languages and scripts, by which each letter, digit, or symbol is assigned a unique numeric value that applies across different platforms and programs | RGB: RGB (red, green, and blue) refers to a system for representing the colors to be used on a computer display. Red, green, and blue can be combined in various proportions to obtain any color in the visible spectrum. Levels of red, green, and blue can each range from 0 to 100 percent of full intensity. Data Compression: . | Lossy, Lossless (not discussed) Unit 3… Algorithm/Programming Terms . | Variables: Values that can change, depending on the conditions and code written. Often assigned by the programmer. | Data Types: A particular kind of data item, can be defined by the values it can take, the programming language used, or the operations that can be performed on it. | Assignment Operators: Used to assign values, functions, and variables to something. Managing Complexity with Variables: . | Lists: A sequence of several variables, grouped together under a single name. | 2D Lists: A two-dimensional list can also be used to store objects, which is especially convenient for programming sketches that involve some sort of “grid” or “board” | Dictionaries: A dictionary has a set of keys and each key has a single associated value | Class: Extensible program-code-template for creating objects, providing initial values for state and implementations of behavior | Algorithms: Step-by-step procedure that defines a set of instructions that must be carried out in a specific order to produce the desired result | Sequence: Order that commands are executed by a computer, allows us to carry out tasks that have multiple steps | Selection: Programming construct where a section of code is run only if a condition is met | Iteration: Sequence of instructions or code being repeated until a specific end result is achieved | Expressions: A combination of values and functions that are combined and interpreted by the compiler to create a new value | Comparison Operators: Operators that compare two expressions and return a Boolean value that represents the relationship of their values | Booleans Expressions and Selection: Ture or false, compares data of any type as long as types are the same. | Booleans Expressions and Iteration: and/or, not. | Truth Tables: a way of summarising and checking the logic of a circuit. The table shows all possible combinations of inputs and, for each combination, the output that the circuit will produce. You can produce truth tables for parts of a circuit to check the logic at any stage. | Characters: Display unit of information equating to one alphabetic letter or symbol | Strings: Traditionally a sequence of characters, either as a literal constant or as some kind of variable | Length: Code which maps source symbols to a variable number of bits | Concatenation: Means obtaining a new string that contains both of the original strings | If: A conditional statement that only runs the code specified unless the defined conditons are met | Else: Use else to specify a block of code to be executed, if the same condition is false | Elif: used in conditional statements (if statements), and is short for else if | Nested Selection Statements: Used when more than one decision must be made before carrying out a task | Traversing Strings: To traverse a string means to accessing all the elements of the string one after the other by using the subscript. A string can be traversed using for loop or while loop. | Upper: Upper bounds of a function | Lower: Lower bounds of a fucntion Python If, Elif, Else conditionals; Nested Selection Statements . | Python For: A statement that is used to repeatedly execute code as long as the condition is satisfied. | While loops with Range: A loop that itereates through the code specified in it’s body | Combining loops with conditionals to Break: | Continue: Code that is written when the programmer wants to force the program to move on | Procedural Abstraction: Breaking up code in different pieces to add modularity with procedures | Python Def procedures: Def is used when defining a function/procedure in python | Parameters: Input values that help functions and procedures know what values to work with. | Return Values: What a procedure gives as an output/resut. | .",
            "url": "https://h4seeb-cmd.github.io/turtle/fastpages/jupyter/week%2015/2022/12/09/lesson-vocab.html",
            "relUrl": "/fastpages/jupyter/week%2015/2022/12/09/lesson-vocab.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "My First Notebook",
            "content": "Welcome to... my FIRST NOTEBOOK! . WOAH IS THAT PYTHON? . print(&quot;YES IT IS!!!&quot;) . YES IT IS!!! .",
            "url": "https://h4seeb-cmd.github.io/turtle/fastpages/jupyter/week%200/2022/12/08/first-notebook.html",
            "relUrl": "/fastpages/jupyter/week%200/2022/12/08/first-notebook.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Happy Essay",
            "content": "Haseeb Beg . Mrs. Paulson . HSE-3 . 26 September 2022 . Happy Essay . In this day and age, there are many ways to be truly fulfilled and happy. Two ways that people find happiness are by working on their passions and by having a positive impact on the world. . Working on your passions is one of the things in life that can truly fulfill someone and give them a true sense of happiness. One person who has lived by this sentiment is Ronaldo Fadul. He has rejected the world’s materialistic nature for a humble house on the beach where he surfs day in and day out for over 50 years now. He expresses that, “This is the life that I chose. This is not the life of a PhD, but I live well.” He doesn’t quite have as much money as Elon Musk, but he lives a life that he is passionate about, and that’s enough for him. He has stepped off the hedonic treadmill, and in stepping away from the dystopian materialism that has affected Western society, he has found solace. . Another example of honing a skill and focusing on passions is actually a personal example. What surfing is to Ronaldo Fadul, making music is to me. I find tranquility and peace within the confines of my headphones, when making music, it seems as if everything else fades away. It’s just me and the music, in a sense. The thoughts that plague my mind in my day to day life seem to be silenced and my mind is whisked away into a state of flow. This state of flow has helped me through any mental health problems that I have struggled with in the past. One example I can give was a couple weeks ago. I knew that school was starting soon, and whatever I thought about it, I had a sense of dread and anxiety that would just not go away. Even as I would try to sleep, I would think about all the things that could go wrong. My only way of escaping this sense of dread was with music. Whenever I would go onto my DAW (Digital Audio Workstation) to work on projects, I would feel a sense of tranquility. As a result, eventually my passion for music helped me overcome the anxiety that gripped me during the summer. The flow state I was constantly entering on the daily helped me focus more on the present and what is happening right in front of me. . Additionally, it is known that doing acts of kindness and having a positive impact on the world is amazing for one’s mental health. A prime example of this is Andy Wimmer, who works at the Home for the Dying and Destitute in Kolkata, India. He has been helping people for 17 years and before his time in India, he was a rich banker. He lived a normal life, and he was quite into fashion. He spent lots of money on clothes, and materialistic things. However, when he was introduced to the Home for the Dying and Destitute, he thought that there must be more to life than a big house and a fast car. He started living in India and regularly volunteering, and he is living out his intrinsic goals. This is yet another example of people rejecting materialism and how it has made them happier. . Another example of the link between being kind and being happy was found in a study conducted by Kathyrn E. Buchanan and Anat Bardi in 2009. According to berkeley.edu, the study was conducted by sorting 86 participants into three groups for ten days and measuring their life satisfaction via survey before and after the study period. Group one was instructed to do at least one genuinely kind thing every day. Group two was instructed to do something new each day, and group three was not instructed to do anything. At the end of the study, it was found that after being surveyed, groups one and two had roughly equal increases in happiness. Even though group one only had to do one kind thing every day, they managed to feel the same amount of happiness as the group who were constantly doing new things. Additionally, both groups were focused on more intrinsic goals, and that’s why the happiness in the study grew. . Now looking back at this evidence, it’s no wonder that the general population has gotten unhappier and unhappier. If the American Dream of having a big house and fast cars was really the peak of the human experience, if money really was the key to happiness, then why did the suicide rate in the United States soar by 30 percent? .",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/12/08/Happy-Essay.html",
            "relUrl": "/2022/12/08/Happy-Essay.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Homework",
            "content": "Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . # strs = &quot;&quot; # while num: # # if (num &amp; 1) = 1 # if (num &amp; 1): # strs += &quot;1&quot; # if (num &amp; 1) = 0 # else: # strs += &quot;0&quot; # # right shift by 1 # num &gt;&gt;= 1 # return strs # function to reverse the string #def reverse(strs): # print(strs[::-1]) # Driver Code #num = 14 #print(&quot;Binary of num 19 is:&quot;, end=&quot; &quot;) #reverse(DecimalToBinary(num)) NumInput = int(input(&quot;What decimal number would you like to convert to binary?&quot;)) #x = int(NumInput) def DecBinConversion(x): for i in range(31, -1, -1): k = x &gt;&gt; i if (k &amp; 1): print(&quot;1&quot;, end=&quot;&quot;) else: print(&quot;0&quot;, end=&quot;&quot;) x = NumInput DecBinConversion(x) . ValueError Traceback (most recent call last) /home/h4seeb/vscode/turtle/_notebooks/2022-11-30-homework.ipynb Cell 4 in &lt;cell line: 22&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/h4seeb/vscode/turtle/_notebooks/2022-11-30-homework.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; #def DecimalToBinary(num): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/h4seeb/vscode/turtle/_notebooks/2022-11-30-homework.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; # strs = &#34;&#34; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/h4seeb/vscode/turtle/_notebooks/2022-11-30-homework.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; # while num: (...) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/h4seeb/vscode/turtle/_notebooks/2022-11-30-homework.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; #print(&#34;Binary of num 19 is:&#34;, end=&#34; &#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/h4seeb/vscode/turtle/_notebooks/2022-11-30-homework.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; #reverse(DecimalToBinary(num)) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/h4seeb/vscode/turtle/_notebooks/2022-11-30-homework.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; NumInput = int(input(&#34;What decimal number would you like to convert to binary?&#34;)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/h4seeb/vscode/turtle/_notebooks/2022-11-30-homework.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; #x = int(NumInput) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/h4seeb/vscode/turtle/_notebooks/2022-11-30-homework.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; def DecBinConversion(x): ValueError: invalid literal for int() with base 10: &#39;&#39; .",
            "url": "https://h4seeb-cmd.github.io/turtle/week%2013/2022/11/30/homework.html",
            "relUrl": "/week%2013/2022/11/30/homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Searching Introduction",
            "content": "What is searching? . In certain computer programs and applications, one might find the need to locate and retrieve a data value and/or it&#39;s index. Searching algorithms could be done in either intervals or sequences, and certain algorithms could be more efficient than others, with benefits and drawbacks to each. . The Naive Approach . The most intuitively obvious solution to the searching problem is to sequentialy check each successful value in the data structure until either a matching value is found, or the entire structure has been transversed. This thought process could be explained graphically in this example . This algorithm could also be expressed in code, as shown below. . def sequentialSearch(arr, target): N = len(arr) # Declare N as length of array for i in range(N): # Iterate over the list if arr[i] == target: # Check for match return i # Match found, return index and end function call return -1 # Element not found . Sequential Search - Larger Inputs . Although for selection sort is seemingly fast for smaller inputs, it is clear that it cannot keep up with increasing input sizes. Because sequential search checks every value of the given array, the algorithm&#39;s overall runtime increases &quot;linearly&quot; with the input size. . i.e. Pretend that one check takes one second, and that we are searching for the last element in an array. If the array length is 4, it would take 4 seconds to find the last element, whereas if the array length is 86400 indices long, it would take a whole day to find the element. . Hence, although selection sort is known for its simplicity, it is unfeasible for large inputs . Below, we have created three sorted lists of length 100,1000000,100000000. . import time arr1 = [i for i in range(100)] arr2 = [i for i in range(1000000)] arr3 = [i for i in range(100000000)] . To analyze the sequential search algorithm, we will check for the worst case scenario, where runtime is maximized. This is because when measuring the efficiency of our algorithm, we want to be able to guarantee an upper limit or set amount of time for our program to finish running. To do this, we will attempt to search for the last element in the array . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05602836608886719 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 58.67457389831543 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 5162.384986877441 ms . As you can see, as the input list grows larger and larger, the overall runtime of the program increases linearly as well, resulting in a lower scalability for the sequential search algorithm. . Binary Search . Binary search is an efficient way to iterate through a SORTED list to find a requested value. This is done through checking the middle value of a list and checking if the requested value is greater than or less than the middle value. You can start to see why the requested list must be sorted. If the list is not sorted, this logic is flawed, and the binary search algorithm will no longer work. . Unlike the sequential search method, binary search doesn&#39;t check for each successive element until a match is found. In every iteration the algorithm is making a binary decision; if the selected element is larger or smaller than the target. . How exactly does this work? Lets look at these amazing ms paint drawings: . i was too lazy to make a third so ur gonna have to live with 2 :) . This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. . If the array is 8 items long, the maximum possible cycles would be 3 (log base 2 of 8 is 3) . If the array is 7 items long, the maximum possible cycles would STILL be 3 as the closest power of 2 to 7 is 8. . If the array is 9 items long, the maximum possible cycles INCREASES to 4, as the closest, next power of two, is 16. . def binarySearch(array, target): # Parameters: array is the given array and target is what we are looking for low = 0 # the starting lower bound high = len(array)-1 # the starting upper bound while high &gt;= low: # we will keep running until we run out of possible subarrays... mid = (high + low) // 2 # define the middle of the list to be the item at the index of the average of the lower and upper bound if array[mid] == target: # if item is in the middle of the list... we found what we are looking for! return mid # therefore, we return the index of where we found the item. elif array[mid] &gt; target: # if item is less than the middle of the list, this must mean that the item is on the lower half of the list high = mid-1 # therefore, we set the upper bound of the search to be the last item of the lower half else: # if item is neither less than or equal to the middle of the list, this must mean that the item is on the upper half of the list low = mid+1 # therefore, we set the lower bound of the search to be the first item of the upper half # if nothing is returned by the time the while loop ends, that means item MUST be missing from list return False # therefore we tell the user that the requested item was not found . Likewise, we can also take a recursive approach to this problem, note the similarities . def BinarySearchRecursion(arr, target, lo, hi): if lo &gt; hi: return False mid = (lo+hi)//2 if arr[mid] == target: return mid elif arr[mid] &gt; target: return BinarySearchRecursion(arr, target, lo, mid-1) elif arr[mid] &lt; target: return BinarySearchRecursion(arr, target, mid+1, hi) . Now, let&#39;s compare the runtime with the same lists we tried with the sequential search algorithm. . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05507469177246094 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 0.17070770263671875 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 0.06628036499023438 ms . arr4 = [1,4,5,8,10,13,145,1938] print(&quot;Index: &quot;, binarySearch(arr4,17)) . Index: False . Challenges and Homework . You have one homework problem. . Yes just one. . Don&#39;t get excited though. . Problem: Given a specific integer N, return the square root of N (R) if N is a perfect square, otherwise, return the square root of N rounded down to the nearest integer . Input: N (Integer) . Output: R (Integer) . Constraints: Do not use any built-in math operations such as sqrt(x) or x**(0.5), Try complete the problem in logarithmic time. . Hint 1: Maybe you can use Binary Search to try and reduce the number of checks you have to perform? . Hint 2: Is there a mathematical pattern amongst numbers and their square roots that could help you reduce the number of searches or iterations you must execute? Is there some value or rule you can set before applying binary search to narrow the range of possible values? . Run the very last code segment below to load test cases and submission function . def sqrt(N): # Write your code here return None . from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid(): for i in range(len(test_cases)): if sqrt(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() . Check number 1 failed Check number 2 failed Check number 3 failed Check number 4 failed Check number 5 failed Check number 6 failed Check number 7 failed Check number 8 failed Check number 9 failed Check number 10 failed Check number 11 failed Check number 12 failed Check number 13 failed .",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/11/29/searching-introduction.html",
            "relUrl": "/2022/11/29/searching-introduction.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Developing Algorithms (JavaScript)",
            "content": "Review . if-else statements . Syntax: . if (condition) { } else if (condition 2) { } else { } . for loops . for (let i = number; i &lt; number; i++) { // code } . Conditionals vs Booleans . Conditionals and booleans can be equivalent. . For example, let&#39;s say there are two booleans: rainy and sunny. . Let&#39;s look at the following code: . sunny = true; rainy = false; . if (sunny) { umbrella = false; } else if (rainy) { umbrella = true; } else { umbrella = false; } console.log(umbrella); . false . The code above is the same as below: . umbrella = !sunny &amp;&amp; rainy; console.log(umbrella); . false . To determine if two conditionals and booleans are the same, you can substitute the four possibilities that the two booleans (sunny and rainy) can be (listed below) into the conditional and boolean and see if both cases match: . sunny = true, rainy = true . sunny = true, rainy = false . sunny = false, rainy = true . sunny = false, rainy = false . Challenge . Using JavaScript, create an algorithm that takes in an IP address and a subnet mask and computes the network address. . Overview . As we&#39;ve seen in Unit 4.1, an IP address is a 32 bit number that uniquely identifies each device. (See this for a recap). Something extra is that an IP address also comes with a subnet mask. A subnet mask is also a 32 bit number that identifies what network an IP address in in through a process that uses the bitwise AND. . In ANDing: . 0 + 0 = 0 . 0 + 1 = 0 . 1 + 0 = 0 . 1 + 1 = 1 . The following are the steps to determine the network that an IP address is in given the subnet mask: . Example: IP address: 192.168.0.1 . Subnet mask: 255.255.255.0 . Convert the IP address into binary: 192.168.0.1 -&gt; 11000000.10101000.00000000.00000001 | Convert the subnet mask into binary: 255.255.255.0 -&gt; 11111111.11111111.11111111.00000000 | Do a bitwise AND operation on the binary IP address and subnet mask: | 11000000.10101000.00000000.00000001 +11111111.11111111.11111111.00000000 =11000000.10101000.00000000.00000000 . Convert the result back to decimal: 11000000.10101000.00000000.00000000 -&gt; 192.168.0.0 | The network address is 192.168.0.0 .",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/11/29/developing-algorithms-js.html",
            "relUrl": "/2022/11/29/developing-algorithms-js.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Developing Algorithms",
            "content": "Algorithms can be written in different ways and still accomplish the same tasks. Algorithms that look similar often yield differnet outputs. To solve the same problem, many different algorithms can be used. . Therefore, algorithms are very important for programmers, and today we&#39;re going to explore how to determine the outcome of algorithms, how to deteremine the output of similar algorithms, how to edit existing algorithms, and how to develop our own algorithms. . Determine the outcome of algorithms . Consider the following algorithm. . def mystery(num, num2): if (num % num2 == 0): print(&quot;True&quot;) else: print(&quot;False&quot;) mystery(20, 4) . True . What does the algorithm do? Please explain in words. | What if I put in 30 as num and 4 as num2. What would be the output? | Determine the outcome of similar algorithms . What is the output of this algorithm? . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) else: if (temp &gt;= 65): print(&quot;I will go outside&quot;) else: print(&quot;it is too cold outside&quot;) . What is the output of this algorithm? it looks similar but the output is different! . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) if (temp &gt;= 65): print(&quot;i will go outside&quot;) if (temp &lt; 65): print(&quot;it is too cold outside&quot;) . Editing Algorithms . Task: Please edit the algorithm above to have it yield the same results as the previous algorithm! (no matter what temp you put in) . Developing Algorithms . To develop algorithms, we first need to understand what the question is asking. Then, think about how you would approach it as a human and then try to find what pattern you went through to arrive at the answer. Apply this to code, and there you have it! An algorithm! . Let&#39;s say you wanted to sum up the first five integers. How would you do this in real life? Your thought process would probably be: . The sum of the first integer is 1. | Then, increase that integer by 1. I now add 2 to my existing sum (1). My new sum is 3. | Repeat until I add 5 to my sum. The resulting sum is 15. | . Now let&#39;s translate this into code. . sum = 0 # start with a sum of 0 for i in range (1, 6): # you will repeat the process five times for integers 1-5 sum = sum + i # add the number to your sum print(sum) # print the result . 15 . Task: Write an algorithm in python that sums up the first 5 odd integers. You can use the following code as a starter. . sum = 0 counter = 1 for i in range (0, 10): sum = sum + counter if sum &amp; 2 == 1: print(sum) else: continue . Homework . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from the Collatz Conjecture. The COllatz Conjecture is as follows: . start with any positive integer | if the number is even, divide by 2 | if the number is odd, multiply by 3 and add 1 | repeat steps 2 and 3 until you reach 1 | Example: if the starting number was 6, the output would be 6, 3, 10, 5, 16, 8, 4, 2, 1 .",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/11/29/Developing-Algorithms.html",
            "relUrl": "/2022/11/29/Developing-Algorithms.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "U3s1&2",
            "content": "",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/11/28/u3s1&2.html",
            "relUrl": "/2022/11/28/u3s1&2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Title",
            "content": "title: Team 1 Presentation HMWK | toc: true | comments: true | branch: master | comments: true | badges: true | author: Haseeb Beg | categories: [fastpages, jupyter, Week 10] | . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] min_valid = 100 max_valid = 200 for i in range (len(data)): if data[i] &gt; max_valid: print(data[i],i) elif data[i] &lt; min_valid: print(data[i],i) . 4 2 308 4 5 6 306 9 . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ) ] albumChoice = int(input(&quot;What album do you want to play?&quot;)) songChoice = int(input(&quot;What song do you want to play?&quot;)) print(&quot;Playing &quot;{0} &quot; from album &quot;{1} &quot;&quot;.format(albums[albumChoice-1][3][songChoice-1][1],albums[albumChoice-1][0])) . Playing &#34;I Turned to Stone&#34; from album &#34;Nightflight&#34; .",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/11/28/Team1HMWK.html",
            "relUrl": "/2022/11/28/Team1HMWK.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Lists and Iteration Homework",
            "content": "Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Add your OWN Notes for 3.10 here: . Lists are collections of data that can store lots of information | You can manipulate lists to be changed automatically | Lists have indexs that represent the location of an element in their respective list. Normally start on 0 in most coding languages. | . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList[i] | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x = aList[i] | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i] &lt;-- x | aList[i] = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList[i] = aList[j] | Assigns value of aList[j] to aList[i] | . INSERT(aList, i, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | _value is placed in index i in aList. Any element with an index value greater than i will shift one position to the right. | . REMOVE(aList, i) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Overview and Notes: 3.8 - Iteration . Add your OWN Notes for 3.8 here: . To iterate is to repeat. In coding, it is used to describe repeating sections of code based on a set of programs. | Make sure to not have a dead loop that infinitely repeats. | Automating code is possible using various types of loops. | We can make loops inside loops. | . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . qCorrect: 0 qTotal: 5 questions = [ (&quot;Q1: what is the python syntax for accessing an element of a list?&quot;, &quot;A) aList[i]&quot;, &quot;B) x &lt;-- aList[3]&quot;, &quot;C) idk&quot;, &quot;A&quot;), (&quot;Q2: what is the psuedocode syntax for assigning a value of one index in a list to another?&quot;, &quot;A) aList.insert(i, value)&quot;, &quot;B) WHAT IS THIS&quot;, &quot;C) aList[i] = aList[j]&quot;, &quot;C&quot;), (&quot;Q3: what is the syntax for appending something into a string?&quot;, &quot;A) aList.append(value)&quot;, &quot;B) REMOVE(aList, i)&quot;, &quot;C) help&quot;, &quot;A&quot;), (&quot;Q4: what does it mean to append something?&quot;, &quot;A) To join something together&quot;, &quot;B) To seperate something&quot;, &quot;C) what is python?&quot;, &quot;A&quot;), (&quot;Q5: what is a recursive loop?&quot;, &quot;A) a loop that is for something&quot;, &quot;B) a function&quot;, &quot;C) loops that involve incrementing a variable until it reaches a certain break point.&quot;, &quot;C&quot;) ] def printQuestion(tuple): print(tuple[0]) print(tuple[1]) print(tuple[2]) print(tuple[3]) qCorrect = 0 qTotal = 5 def questionloop(): qCorrect = 0 qTotal = 5 for i in range(len(questions)): print(printQuestion(questions[i])) qAnswer = input(&quot;insert answer here...&quot;) if qAnswer == questions[i][4]: print(&quot;correct!&quot;) qCorrect += 1 else: print(&quot;L you got it wrong&quot;) return qCorrect qCorrect = questionloop() print(&quot;you got&quot; + &quot; &quot; + str(qCorrect) + &quot; &quot; + &quot;/&quot; + &quot; &quot; + str(qTotal) + &quot; &quot; + &quot;right!&quot;) . Q1: what is the python syntax for accessing an element of a list? A) aList[i] B) x &lt;-- aList[3] C) idk None correct! Q2: what is the psuedocode syntax for assigning a value of one index in a list to another? A) aList.insert(i, value) B) WHAT IS THIS C) aList[i] = aList[j] None correct! Q3: what is the syntax for appending something into a string? A) aList.append(value) B) REMOVE(aList, i) C) help None correct! Q4: what does it mean to append something? A) To join something together B) To seperate something C) what is python? None L you got it wrong Q5: what is a recursive loop? A) a loop that is for something B) a function C) loops that involve incrementing a variable until it reaches a certain break point. None L you got it wrong you got 3 / 5right! . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] # Print the fourth item in the list print(grocery_list[3]) # Now, assign the fourth item in the list to a variable, x and then print the variable x = grocery_list[3] print(x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&quot;umbrellas&quot;) grocery_list.append(&quot;artichokes&quot;) # Insert the item eggs as the third item of the list grocery_list.insert(2,&quot;eggs&quot;) # Remove milk from the list grocery_list.remove(&quot;milk&quot;) # Assign the element at the end of the list to index 2. Print index 2 to check grocery_list[2] = grocery_list[-1] print(grocery_list[2]) # Print the entire list, does it match ours ? print(grocery_list) # Expected output # carrots # carrots # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . carrots carrots artichokes [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [&quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot;] declist = [] # how would I reverse engineer binary bit-by-bit? I don&#39;t understand an ounce as to what to do. def binary_convert(binarylist): print(int(binarylist[0])) # i guess i could try and reverse the remainder stuff from dec -&gt; bin but i don&#39;t know how i could go about it # the issue lies with the fact that this is a list with strings. binary_convert(binarylist) . 1001001 .",
            "url": "https://h4seeb-cmd.github.io/turtle/homework/",
            "relUrl": "/homework/",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Big idea 3!",
            "content": "3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is * the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is the symbol for division is / the symbol for modulus is % an algorithm is a sequence of actions that serves to create . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = [3,4,9,76,891] for i in range(len(numlist)): if int(numlist[i])%3==0: print(str(numlist[i]) + &quot; is divisible by 3&quot;) continue else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(dec): bin = &quot;&quot; i = 7 while i &gt;=0: if dec % (2**i) == dec: bin = bin + &quot;0&quot; i -= 1 else: bin = bin + &quot;1&quot; dec -= 2**i i -= 1 print(bin) convert(37) . 00100101 . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is the process of combining 2 strings. Length is the amount of characters in a string. A substring is a part of a string :) . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; x = string[0:5] print(x) y = string[5:9] print(y) print(len(string)) . hello bye 8 . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = string1 + &quot; &quot; + string2 print(string3) . computer science . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for name in names : print(name + &quot;: &quot; + str(len(name))) length(names) . jaden: 5 max: 3 dylan: 5 orlando: 7 . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | .",
            "url": "https://h4seeb-cmd.github.io/turtle/week-13/big-idea-3/2022/11/18/expressions-and-strings.html",
            "relUrl": "/week-13/big-idea-3/2022/11/18/expressions-and-strings.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Binary",
            "content": "Type any number and hit tab to convert to binary Binary :",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/11/17/binary.html",
            "relUrl": "/2022/11/17/binary.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Night at the Museum Notes",
            "content": "CSP . Alan, Steven, Ederick, Noor, Liav: . Calendar that takes date and weather. Can check weather in other areas as well. Search bar to search cities. . Paraas, Samarth, AJ, Haoxuan: . Motivational quote app that shows motivational quotes under different categories. Using API to pull the assigned quote list and there is a voting counter as well, similar to that of mort’s jokes API. . Team Peacock-Justin, James, Shruti and Joslyn: . API that pulls city names inputted by user and gives relevant info. Also there is a broken tetris game. . Fitness Forever-Advay, Krishiv, Dhruva, and Shivansh: . API gives motivational workout quotes. Also has a calorie calculator, along with workout tracking?? Fitness goals recorder and BMI calculator as well. . Swag Math Games-Aiden, Dash, Sabime, Ahad: . Pokemon guessing game, tetris, cookie clicker, and blackjack. APIs to track info for all of them. Extensive use of GET protocol and connecting apis. . TeamBerries: . Dictionary that uses API to get words and definitons. Survey present to get user feedback on website. Word of the day shown. Randomized. . Lyntax-Lucas, Aniket, Soham, Ryan . Hangman game that has the API usage with words and definitions. Backend has dictionary with words and definitions that randomize each game. . CSA . DN Marketplace: . Del Norte students can buy and sell things. API usage with storing user sale stuff, also input for item, price, and user info. . TeamCheese: . Quiz project with many different projects. API usage in the quiz content, however it’s janky and not well designed. . NBA Stats Site: . NBA database of teams and their best players. API usage shown in stored stats. Also, there is a search bar to search a desired team. . Reflection . Throughout NatM, I have seen various projects with various skill levels attached. Something interesting that I noticed was that the CSA projects were not too far off from the CSP projects. If anything, it was the little things, like cool hover animations, that seperated the two. .",
            "url": "https://h4seeb-cmd.github.io/turtle/fastpages/jupyter/week%2012/2022/11/09/NatM-notes.html",
            "relUrl": "/fastpages/jupyter/week%2012/2022/11/09/NatM-notes.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Collegeboard Final Test Corrections/Reflection",
            "content": "Test Corrections: . Question 6: . Documentation for procedure with a loop: . In the following procedure, the parameter max is a positive integer. . PROCEDURE printNums(max) { count ← 1 REPEAT UNTIL(count &gt; max) { DISPLAY(count) count ← count + 2 } } . Which of the following is the most appropriate documentation to appear with the printNums procedure? . Correct answer: B, Prints all positive odd integers that are less than or equal to max. The loop terminates when count exceeds max, so only values less than or equal to max are printed. . Question 17: . Purpose of Internet protocols: . Which of the following is a primary reason for the use of open protocols on the Internet? . Correct answer: D, Open protocols provide a way to standardize data transmission between different devices. Protocols are agreed-upon sets of rules that specify the behavior of a system. Protocols used on the Internet enable devices from different manufacturers to communicate in a standard way. . Question 43: . Value of x after REPEAT UNTIL block: . Consider the following code segment. . x ← 0 result ← 0 REPEAT UNTIL x is greater than 5 result ← result plus x x ← x plus 1 . What is the value of result after the code segment is executed? . Correct answer: C, The variables x and result are initialized to 0. Inside the loop, result is increased by x and x is increased by 1. The loop terminates when x exceeds 5. Therefore, result is assigned the sum of the integers from 0 to 5, or 15. . Question 45: . Values of counts after traversing theList: . Consider the following code segment. . theList ← [-2, -1, 0, 1, 2] count1 ← 0 count2 ← 0 FOR EACH value IN theList { IF(value &gt; 0) { count1 ← count1 + 1 } ELSE { count2 ← count2 + 1 } } . What are the values of count1 and count2 as a result of executing the code segment? . Correct answer: B, The code segment iterates through each element in the list, incrementing count1 for each positive value and incrementing count2 otherwise. The list contains two positive values, so count1 is 2 and count2 is 3. . Reflection: . Overall, the test went pretty well. I did increase my understanding of the Collegeboard pseudo-code since the last quiz. However, there are still gaps in my understanding. For one, I had to mostly guess the questions on bits, and I did have to communicate with our group with members that had not completeted the assessment at the time of collaberation to understand the concepts involved. One key thing I learned was how sensors pull at multiple intervals per second measured in Hz. .",
            "url": "https://h4seeb-cmd.github.io/turtle/fastpages/jupyter/week%2012/2022/11/09/CB-final-test-corrections.html",
            "relUrl": "/fastpages/jupyter/week%2012/2022/11/09/CB-final-test-corrections.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Web-API Tutorial Lecture Stuff",
            "content": "// prepare HTML defined &quot;result&quot; container for new output const resultContainer = document.getElementById(&quot;result&quot;); // keys for joke reactions const HAHA = &quot;haha&quot;; const BOOHOO = &quot;boohoo&quot;; // prepare fetch urls const url = &quot;https://flask.nighthawkcodingsociety.com/api/jokes&quot;; const like_url = url + &quot;/like/&quot;; // haha reaction const jeer_url = url + &quot;/jeer/&quot;; // boohoo reaction // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method .",
            "url": "https://h4seeb-cmd.github.io/turtle/fastpages/jupyter/week%2010/2022/10/19/webapi-tutorial-lecutre.html",
            "relUrl": "/fastpages/jupyter/week%2010/2022/10/19/webapi-tutorial-lecutre.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Qualcomm Presentation",
            "content": "Intro To Engineering . Engineering at it’s core is the practice of using math and science to solve problems. There are many different types of engineers. Some include: . Mechanical | Software | Civil | Aeronautical | Biotech One way to find your specific field that was mentioned was process of elimination. Personally for me, software and biotech seem equally lucrative and cool. | . Women in Engineering . One problem that was discussed in this presentation was that of the unfair treatment of women in STEM fields. Even in the year 2022, some companies do not take women seriously. There have even been scandals recently about companies like Activision-Blizzard harrassing women and treating them horribly. Engineering sees no gender, no concept of race, but rather, someone’s creativity and problem solving ability. . What Should I Do to Get Into a Good CS University? . Someone in the meeting asked a question regarding good CS universities and what to do in order to get into them. The response was what I expected for the most part. CS based extracurriculars and experience along with a good show of academic excellence and rigor would be ideal. I should try to find CS classes I can take at local community colleges. Additionally, in order to build my CS portfolio for the future, I should try and look to see if any companies are taking internships. 1 . Intersections Between STEM and Buisness at Qualcomm . The Tenets . There are 3 tenets to follow when working with STEM and buisness: . Stay curious | Do not give up, ever | Know the difference between invention and innovation. | . Staying curious is the key to bringing new, innovative things to the table. This desire to learn new things and implementing new ways of using said things is crucial. This leads into never giving up, as if you give up when the going gets tough, how will you find the new, innovative things. Bill Gates would not have made Microsoft if he had given up halfway through because “it was too hard” or “it had a very little chance of success.” Lastly, while invention is creating an entirely new thing, innovation is the proccess of refining said thing. .",
            "url": "https://h4seeb-cmd.github.io/turtle/fastpages/jupyter/week%208/2022/10/18/QC-presi.html",
            "relUrl": "/fastpages/jupyter/week%208/2022/10/18/QC-presi.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "CB Unit 1 Notes",
            "content": "Notes from College Board 1.1 . Learning Objectives CRD - 1.A Explain how innovations are improved through collaboration. CRD - 1.A.1 A computing innovation includes a program as an integral part of its function. CRD - 1.A.2 A computer innovation can be physica (i.e., self-driving car), non physical computing software (e.g., picture editing software), or a nonphysical computng concept (e.g., e-commerce). CRD - 1.A.3 Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it. CRD - 1.A.4 Collaboration that incudes diverse perspectives helps avoid bias in the development of computing innovations CRD - 1.C Demonstrate effective interpersonal skills during collaboration. CRD - 1.C.1 Effective collaborative teams practice interpersonal skills, including, but not limited to: Communication, Consesus Building, Conflict Resolution, Negotiation . Notes Different people in different departments work on different subjects and interests. . A program always start up with an idea, purpose and plan. A program must have requirements of the that meet the necessary constraints it must meet. . Developers are able to practice better interpersonal skills in a diverse team. . Pair Programming: One programmer types the code, while the other reviews each line of code. . Think-Pair-Share: Students think through a problem alone, pair with a partner to share ideas, and then share results with the class . This is the beginning of planning for the Create Performance Task assignment. More will be added to this post as weeks go by until it is time to code. . What I know that could help with the project: . How to make a quiz How to create list How to use dictionaries How to explain the code I have made What I need for the project: . Learn how to use different functions Learn how to display variables correctly Look at examples of bad, good, and great Performance Task Projects Look over the college board requirements . Notes from College Board 1.2 . Video Notes Computer programs accept input in a variety of different forms (tacile aka touch, audio, visual, text). Programs are mostly event-driven –&gt; events (mouse clicks, screen taps/swipes, physical button clicks, eyboard entries, audio keywords/phrases) are triggered by actions, which sends input to the program. Input affects output of a program. Outputs can be visual, audio,touch/feel(vibrations), text, etc. A program (aka software) is a collection of statements. A statement is a single command, a group of statements is a code segment. To describe a code segment, first state what it does, and then include how it does it. . Learning Objectives CRD - 2.A - Describe the purpose of a computing innovation. CRD - 2.A.1 - The purpose of computing innovations is to solve problems or to pursue interests through creative expression. CRD - 2.A.2 - An understanding of the purpose of a computing innovation provides developers with an improved abiltiy to develop that essential knowledge on. . Notes Different innovations are contained under different categories of innovations . Program inputs are pecies of data that are sent to computers for processing and interpretation. The computer will then perform operations and manipulate teh data in order to produce a desirable. Inputs can either come from the user themselves, or from another program. . Every event in a program is associated with an action that supplies an input to the program. . Event Driven Programming: Program segments and code fragments are executed based on events that trigger specific control flow structures rather an a smooth, sequential flow. . A program is a collection of software statements that collectively serves a specific use and performs a certain task. . The program works for a variety of inputs and situations. (Think of it like a function) . Notes from College Board 1.3 . There are multiple steps within the development process. The following phrases are commonly used when developing a program. Research, Designing, Prototyping, Testing, followed by revisions. Revisions are a key part of this process and will happen several times. This developmental process is iterative and requires refinement and revision based on testing and feedback. This may require revisiting earlier phrases of the process. Investigation is useful in development for understanding and identifying the program constraints, as well as the requirements of the people who will use the program. Investigation can be perfomed by collecting user data, having beta testing, interviews, and direct observations. . Learning Objectives CRD - 2.E - Develop a program using a development process. CRD - 2.F - Design a program and its user interface CRD - 2.E.1 - A development process can be ordered and intentional, or exploratory in nature. CRD - 2.E.2 - There are multiple development processes. The following phases are commonly used when developing a program: . Investigating and reflecting Designing Prototyping Testing CRD - 2.E.3 - A development process that is iterative requires refinement and revision based on feedback, testing, or reflection throughout the process. This may require revisiting earlier phases of the process. CRD - 2.F.1 - The design of a program incorporates investigation to determine its requirements. CRD - 2.F.2 - Investigation in a development process is useful for understanding and identifying the program constraints, as well as the concerns and interests of the people who will use the program. CRD - 2.F.3 - Some ways investigation can be performed are as follows: . Collecting data through surveys User testing Interviews CRD - 2.F.4 - Program requirements describe how a program functions and may include a description of user interactions that a program must provide. CRD - 2.F.5 - A program’s specification defines the requirements for the program. CRD - 2.F.6 - In a development process, the design phase outlines how to accomplish a given program specification. CRD - 2.F.7 - The design phase of a program may include: . Brainstorming Planning and storyboarding Organizing the program into modules and functional components Creation of diagrams that represent the layouts of the user interface Development of a testing strategy for the program . Notes from College Board 1.4 . Common Errors: To start, it’s important to note that no one is perfect. Errors are bound to happen but identifying, understanding, and fixing thoses errors is what matters more. There are 4 main types of errors when developing a program; Logic, Syntax, Run-time, and Overflow errors. . Logic errors are errors that are caused due to the programmer making a mistake in the algorithm. This causes the program to behave unexpectedly. A logic error can result in events in the program taking place in times that they are not suppose to happen in. . Syntax errors are very small mistakes made by the programmer that doesn’t match with the language. It could be a typo, unnecessary code, missing necessary code, missing characters or added characters. Characters include colon, semicolon, parenthesis, indentations, quotes, and so much more. These mistakes will cause the program to shut down. . Run-time errors happen when a program stops while it is running. This event is also known as “crashing” and the error is normally referred to as a “bug”. A run-time error can be caused by dividing by zero, wrong inputed data type, or many other errors that are commonly caused by incorrect data. . Over-flow errors occur in a program when it is required to perform a calculation that is not possible for it to run. The values in the calculations are outside the set range of values of the program. This is caused due to memory allocation constraints of the program’s language, resulting in restrictions. . Methods to Correct Errors: IDEs: Syntax errors are the easiest errors to fix because most IDEs display information on where and when there is a syntax error. . Test Cases: Unlike syntax errors, logic errors are more difficult to found because the IDEs doesn’t help you and it would normally look like nothing is wrong. This is when programmers use test cases. Test cases are a set of actions(like inputs) that are used to check if they get the correct result. . Hand Tracing: Another testing strategy is hand tracing. Hand tracing is putting in values of variables in a loop to find out if the outcome is correct. This is most useful with loops and other small code segments that repeat a number of times. . Extra Outputs: Lastly, a programmer could just add extra outputs. This strategy is used so that the programmer could find where the error is in the program. When the error is fixed, the extra output is normally removed. .",
            "url": "https://h4seeb-cmd.github.io/turtle/fastpages/jupyter/week%207/2022/10/14/cb1.html",
            "relUrl": "/fastpages/jupyter/week%207/2022/10/14/cb1.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Code Corrections",
            "content": "menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99,} print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) total = 0 N = int(input(&quot;How many items do you wish to purchase?&quot;)) count = 0 while count &lt; N: item = input(&quot;Please select an item from the menu&quot;) try: total += menu[item] count+=1 except: print(&quot;Invalid input&quot;) print(str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 4.98 .",
            "url": "https://h4seeb-cmd.github.io/turtle/fastpages/jupyter/week%207/2022/10/11/code-corrections.html",
            "relUrl": "/fastpages/jupyter/week%207/2022/10/11/code-corrections.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Title",
            "content": "print(&quot;C&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) for weather in weatherData.dict[k,v]: for key, value in weatherData: print(key, value) .",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/10/09/idk.html",
            "relUrl": "/2022/10/09/idk.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "API Demonstration",
            "content": "JS Table | API Usage | Link 3 | . import requests url = &quot;https://spotify23.p.rapidapi.com/search/&quot; querystring = {&quot;q&quot;:&quot;&lt;REQUIRED&gt;&quot;,&quot;type&quot;:&quot;multi&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;limit&quot;:&quot;10&quot;,&quot;numberOfTopResults&quot;:&quot;5&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;0588371053msha6940727d7c83aap107c98jsn19374300bf1d&quot;, &quot;X-RapidAPI-Host&quot;: &quot;spotify23.p.rapidapi.com&quot; } response1 = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;Albums&quot;) Music = response1.json().get(&quot;albums&quot;) Songs = list(Music.items()) for key, value in Songs: print(key, value) . Albums totalCount 28 items [{&#39;data&#39;: {&#39;uri&#39;: &#39;spotify:album:1rVhockt4RAiZFaK3M3zPB&#39;, &#39;name&#39;: &#39;No Jacket Required (2016 Remaster)&#39;, &#39;artists&#39;: {&#39;items&#39;: [{&#39;uri&#39;: &#39;spotify:artist:4lxfqrEsLX6N1N4OCSkILp&#39;, &#39;profile&#39;: {&#39;name&#39;: &#39;Phil Collins&#39;}}]}, &#39;coverArt&#39;: {&#39;sources&#39;: [{&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00001e0279553c4dcec1846d3a5c49ab&#39;, &#39;width&#39;: 300, &#39;height&#39;: 300}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000485179553c4dcec1846d3a5c49ab&#39;, &#39;width&#39;: 64, &#39;height&#39;: 64}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000b27379553c4dcec1846d3a5c49ab&#39;, &#39;width&#39;: 640, &#39;height&#39;: 640}]}, &#39;date&#39;: {&#39;year&#39;: 1985}}}, {&#39;data&#39;: {&#39;uri&#39;: &#39;spotify:album:7avlHipAwnKsxcXwC9Wpin&#39;, &#39;name&#39;: &#39;No Jacket Required (Deluxe Edition)&#39;, &#39;artists&#39;: {&#39;items&#39;: [{&#39;uri&#39;: &#39;spotify:artist:4lxfqrEsLX6N1N4OCSkILp&#39;, &#39;profile&#39;: {&#39;name&#39;: &#39;Phil Collins&#39;}}]}, &#39;coverArt&#39;: {&#39;sources&#39;: [{&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00001e0257480be4ce4fd7659a25b7d9&#39;, &#39;width&#39;: 300, &#39;height&#39;: 300}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000485157480be4ce4fd7659a25b7d9&#39;, &#39;width&#39;: 64, &#39;height&#39;: 64}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000b27357480be4ce4fd7659a25b7d9&#39;, &#39;width&#39;: 640, &#39;height&#39;: 640}]}, &#39;date&#39;: {&#39;year&#39;: 1985}}}, {&#39;data&#39;: {&#39;uri&#39;: &#39;spotify:album:3JalRx7hoyAC7pyoc7aaw7&#39;, &#39;name&#39;: &#39;Some Assembly Required&#39;, &#39;artists&#39;: {&#39;items&#39;: [{&#39;uri&#39;: &#39;spotify:artist:1dwRnam2taNMv8H3VR6isd&#39;, &#39;profile&#39;: {&#39;name&#39;: &#39;Assembly of Dust&#39;}}]}, &#39;coverArt&#39;: {&#39;sources&#39;: [{&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00001e023a08256fb7ce8a38b41ea5ff&#39;, &#39;width&#39;: 300, &#39;height&#39;: 300}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d000048513a08256fb7ce8a38b41ea5ff&#39;, &#39;width&#39;: 64, &#39;height&#39;: 64}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000b2733a08256fb7ce8a38b41ea5ff&#39;, &#39;width&#39;: 640, &#39;height&#39;: 640}]}, &#39;date&#39;: {&#39;year&#39;: 2009}}}, {&#39;data&#39;: {&#39;uri&#39;: &#39;spotify:album:5gxL1YPTDUtyUG2Qp3wVO0&#39;, &#39;name&#39;: &#39;Required Etiquette Vol. 1&#39;, &#39;artists&#39;: {&#39;items&#39;: [{&#39;uri&#39;: &#39;spotify:artist:0LyfQWJT6nXafLPZqxe9Of&#39;, &#39;profile&#39;: {&#39;name&#39;: &#39;Various Artists&#39;}}]}, &#39;coverArt&#39;: {&#39;sources&#39;: [{&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00001e023f494786d82cc0f20a452dbe&#39;, &#39;width&#39;: 300, &#39;height&#39;: 300}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d000048513f494786d82cc0f20a452dbe&#39;, &#39;width&#39;: 64, &#39;height&#39;: 64}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000b2733f494786d82cc0f20a452dbe&#39;, &#39;width&#39;: 640, &#39;height&#39;: 640}]}, &#39;date&#39;: {&#39;year&#39;: 2014}}}, {&#39;data&#39;: {&#39;uri&#39;: &#39;spotify:album:53aQdegVPKq4MgSGgCQuLz&#39;, &#39;name&#39;: &#39;No Faith Required&#39;, &#39;artists&#39;: {&#39;items&#39;: [{&#39;uri&#39;: &#39;spotify:artist:4DMlDJn7CPSSS0DuUf1vrH&#39;, &#39;profile&#39;: {&#39;name&#39;: &#39;Snowy White&#39;}}, {&#39;uri&#39;: &#39;spotify:artist:5zRIFTHDQwGWKZ7z61fFKb&#39;, &#39;profile&#39;: {&#39;name&#39;: &#39;The White Flames&#39;}}]}, &#39;coverArt&#39;: {&#39;sources&#39;: [{&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00001e02c3e11f275c54926f5bfcb411&#39;, &#39;width&#39;: 300, &#39;height&#39;: 300}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00004851c3e11f275c54926f5bfcb411&#39;, &#39;width&#39;: 64, &#39;height&#39;: 64}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000b273c3e11f275c54926f5bfcb411&#39;, &#39;width&#39;: 640, &#39;height&#39;: 640}]}, &#39;date&#39;: {&#39;year&#39;: 1996}}}, {&#39;data&#39;: {&#39;uri&#39;: &#39;spotify:album:0BbeoTXqQv0qKki6CDcznI&#39;, &#39;name&#39;: &#39;Disassembly Required (Teaser Original Soundtrack)&#39;, &#39;artists&#39;: {&#39;items&#39;: [{&#39;uri&#39;: &#39;spotify:artist:0yXeAQirPMVzAlhxGvux1s&#39;, &#39;profile&#39;: {&#39;name&#39;: &#39;Liam Vickers&#39;}}]}, &#39;coverArt&#39;: {&#39;sources&#39;: [{&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00001e0226cf2e2751ee0aec2cf62479&#39;, &#39;width&#39;: 300, &#39;height&#39;: 300}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000485126cf2e2751ee0aec2cf62479&#39;, &#39;width&#39;: 64, &#39;height&#39;: 64}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000b27326cf2e2751ee0aec2cf62479&#39;, &#39;width&#39;: 640, &#39;height&#39;: 640}]}, &#39;date&#39;: {&#39;year&#39;: 2021}}}, {&#39;data&#39;: {&#39;uri&#39;: &#39;spotify:album:1nYOe3S7pWbZwbzS92IScH&#39;, &#39;name&#39;: &#39;Required Repertoire for the 46th PTNA Piano Competition 2022, Vol. 1&#39;, &#39;artists&#39;: {&#39;items&#39;: [{&#39;uri&#39;: &#39;spotify:artist:0LyfQWJT6nXafLPZqxe9Of&#39;, &#39;profile&#39;: {&#39;name&#39;: &#39;Various Artists&#39;}}]}, &#39;coverArt&#39;: {&#39;sources&#39;: [{&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00001e0258c6ffa1c61bed0f61ac1204&#39;, &#39;width&#39;: 300, &#39;height&#39;: 300}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000485158c6ffa1c61bed0f61ac1204&#39;, &#39;width&#39;: 64, &#39;height&#39;: 64}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000b27358c6ffa1c61bed0f61ac1204&#39;, &#39;width&#39;: 640, &#39;height&#39;: 640}]}, &#39;date&#39;: {&#39;year&#39;: 2022}}}, {&#39;data&#39;: {&#39;uri&#39;: &#39;spotify:album:3xEUUVwjNVvTaHQjcpea8O&#39;, &#39;name&#39;: &#39;Assembly Required&#39;, &#39;artists&#39;: {&#39;items&#39;: [{&#39;uri&#39;: &#39;spotify:artist:6ytGxUYeXamODJwiXuZvjO&#39;, &#39;profile&#39;: {&#39;name&#39;: &#39;Olivia Penalva&#39;}}]}, &#39;coverArt&#39;: {&#39;sources&#39;: [{&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00001e02e098b0f0c819f5075263fd0c&#39;, &#39;width&#39;: 300, &#39;height&#39;: 300}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00004851e098b0f0c819f5075263fd0c&#39;, &#39;width&#39;: 64, &#39;height&#39;: 64}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000b273e098b0f0c819f5075263fd0c&#39;, &#39;width&#39;: 640, &#39;height&#39;: 640}]}, &#39;date&#39;: {&#39;year&#39;: 2022}}}, {&#39;data&#39;: {&#39;uri&#39;: &#39;spotify:album:55bIeFDVLsLwa3WEnSJe0C&#39;, &#39;name&#39;: &#39;No Fantasy Required&#39;, &#39;artists&#39;: {&#39;items&#39;: [{&#39;uri&#39;: &#39;spotify:artist:5l9wiTZVfqQTfMDOt0HtwC&#39;, &#39;profile&#39;: {&#39;name&#39;: &#39;Tiga&#39;}}]}, &#39;coverArt&#39;: {&#39;sources&#39;: [{&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00001e023542e4268c5a12d41a98b164&#39;, &#39;width&#39;: 300, &#39;height&#39;: 300}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d000048513542e4268c5a12d41a98b164&#39;, &#39;width&#39;: 64, &#39;height&#39;: 64}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000b2733542e4268c5a12d41a98b164&#39;, &#39;width&#39;: 640, &#39;height&#39;: 640}]}, &#39;date&#39;: {&#39;year&#39;: 2016}}}, {&#39;data&#39;: {&#39;uri&#39;: &#39;spotify:album:2ZNhj2qao5CEasrS2NH45J&#39;, &#39;name&#39;: &#39;No Assembly Required&#39;, &#39;artists&#39;: {&#39;items&#39;: [{&#39;uri&#39;: &#39;spotify:artist:70BRQ5tBte6kVqHviL3srE&#39;, &#39;profile&#39;: {&#39;name&#39;: &#39;Pieces Of A Dream&#39;}}]}, &#39;coverArt&#39;: {&#39;sources&#39;: [{&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d00001e0238b547096e33bf308c492a4b&#39;, &#39;width&#39;: 300, &#39;height&#39;: 300}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000485138b547096e33bf308c492a4b&#39;, &#39;width&#39;: 64, &#39;height&#39;: 64}, {&#39;url&#39;: &#39;https://i.scdn.co/image/ab67616d0000b27338b547096e33bf308c492a4b&#39;, &#39;width&#39;: 640, &#39;height&#39;: 640}]}, &#39;date&#39;: {&#39;year&#39;: 2004}}}] . import requests from sqlalchemy import values url = &quot;https://weatherbit-v1-mashape.p.rapidapi.com/current&quot; querystring = {&quot;lon&quot;:&quot;-82.996216&quot;,&quot;lat&quot;:&quot;40.367474&quot;,&quot;units&quot;:&quot;imperial&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;0588371053msha6940727d7c83aap107c98jsn19374300bf1d&quot;, &quot;X-RapidAPI-Host&quot;: &quot;weatherbit-v1-mashape.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;Ohio Weather&quot;) weatherData = response.json().get(&quot;data&quot;) OHweather = list(weatherData[0].items()) for key, value in OHweather: print(key, value) . Ohio Weather app_temp 70.4 aqi 46 city_name Kilbourne clouds 7 country_code US datetime 2022-10-11:20 dewpt 40.7 dhi 93.3 dni 784.3 elev_angle 29.6 ghi 474.34 gust 14.5 h_angle 45 lat 40.3675 lon -82.9962 ob_time 2022-10-11 20:30 pod d precip 0 pres 988 rh 33 slp 1021.00433 snow 0 solar_rad 474.3 sources [&#39;rtma&#39;] state_code OH station G1320 sunrise 11:39 sunset 22:58 temp 72 timezone America/New_York ts 1665520235 uv 3.0414183 vis 9.3 weather {&#39;code&#39;: 800, &#39;icon&#39;: &#39;c01d&#39;, &#39;description&#39;: &#39;Clear sky&#39;} wind_cdir S wind_cdir_full south wind_dir 177 wind_spd 9.9 .",
            "url": "https://h4seeb-cmd.github.io/turtle/submenu2/APIUsage",
            "relUrl": "/submenu2/APIUsage",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "AP Exam Practice",
            "content": "Proof of Completion: . . I notice that I still need to work on understanding the Collegeboard code and understanding code logic. That is the main thing holding me back at the minute. I also need to work on my speed as well. . Problem 1: . DineOutHelper is a mobile application that people can use to select a restaurant for a group meal. Each user creates a profile with a unique username and a list of food allergies or dietary restrictions. Each user can then build a contact list of other users of the app. . A user who is organizing a meal with a group selects all the members of the group from the user’s contact list. The application then recommends one or more nearby restaurants based on whether the restaurant can accommodate all of the group members’ allergies and dietary restrictions. . Suppose that Alejandra is using DineOutHelper to organize a meal with Brandon and Cynthia. Which of the following data are needed for DineOutHelper to recommend a restaurant for the group? . 1) Each group member’s list of food allergies or dietary restrictions 2) Alejandra’s geographic location 3) The usernames of the people on Brandon and Cynthia’s contact lists . Problem 2: . To direct a call to the appropriate destination, which of the following input data is needed by the upgraded system that was NOT needed by the original system? . 1) Audio signal of the customer’s voice 2) The customer’s keypad selection 3) The customer’s phone number . Problem 3: . The figure below represents a network of physically linked computers labeled A through G. A line between two computers indicates that the computers can communicate directly with each other. Any information sent between two computers that are not directly connected must go through at least one other computer. For example, information can be sent directly between computers A and B, but information sent between computers A and C must go through other computers. What is the minimum number of connections that must be broken or removed in the network before computer E can no longer communicate with computer F? . 1) 1 2) 3 3) 4 4) 2 . Answers: . Problem 1: 1 and 2 only | Problem 2: 1 only | Problem 3: 3 only | .",
            "url": "https://h4seeb-cmd.github.io/turtle/markdown/week%206/2022/10/09/AP-practice.html",
            "relUrl": "/markdown/week%206/2022/10/09/AP-practice.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Title",
            "content": "print(&quot;C&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) .",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/10/08/idk.html",
            "relUrl": "/2022/10/08/idk.html",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Collegeboard MCQs",
            "content": "Proof of Completion: . . Things I Found Difficult: . - The Pseudo-Code . I found that working with the psuedo-code proved to be a challenge for many reasons. For one, it was something I am not entirely familiar with, as I have had very little exposure and I have never actually used it for anything. Due to this sense of unfamiliarity, figuring out the logic behind certain pieces of code was very challenging for me. . - The Word Problems . Additionally, I found that the word problems were also challenging for me. It felt like they were extremely bloated and there was some useless information for the purpose of throwing me off. . Overall Thoughts . I think that I will definetely need to train myself to learn the CollegeBoard psuedocode a little bit more, as that will for sure show up on the AP exam. Additionally, I will have to get better at seeing the logic in code. In order to do that I must practice to analyze different pieces of code to pick apart their funciton. I should also strive to get better at the word problems, as they gave me quite a lot of trouble. .",
            "url": "https://h4seeb-cmd.github.io/turtle/markdown/week%206/2022/10/02/collegeboard-mcqs.html",
            "relUrl": "/markdown/week%206/2022/10/02/collegeboard-mcqs.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Title",
            "content": "This is my table. . It was created using HTML Fragments: . JS More Table . JavaScript Usage | JavaScript Demonstration | . More Table | More Table | .",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/09/25/javascript-testing.html",
            "relUrl": "/2022/09/25/javascript-testing.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "JavaScript Demonstration",
            "content": "JS Table | API Usage | Link 3 | . var Letters = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;]; var numbers = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]; var rLetters = Math.floor(Math.random()*Letters.length); var rNumbers = Math.floor(Math.random()*numbers.length); var user = Letters[rLetters] + numbers[rNumbers]; console.log (user); . w5 . // Defining variable team var team = { Haseeb: &quot;h4seeb-cmd&quot;, Shaurya: &quot;STG-7&quot;, Tirth: &quot;Tirth-Thakkar&quot;, Evan: &quot;chewy-boba10&quot;, Alex: &quot;YLu-1258&quot; }; // Creating the function to make the table function createTable(values){ var table = &quot;&lt;table&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;GitHub Username&lt;/th&gt;&lt;/tr&gt;&quot; var keys = Object.keys(values); // Printing the values into the table for(var index in keys){ const key = keys[index]; const value = team[key]; table += &quot;&lt;tr&gt;&lt;td&gt;&quot;+key+&quot;&lt;/td&gt;&lt;td&gt;&quot;+value+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;; } table += &quot;&lt;/table&gt;&quot;; return table; } $$.html(createTable(team)); . NameGitHub Username . Haseeb | h4seeb-cmd | . Shaurya | STG-7 | . Tirth | Tirth-Thakkar | . Evan | chewy-boba10 | . Alex | YLu-1258 | .",
            "url": "https://h4seeb-cmd.github.io/turtle/submenu/js-trial-and-error",
            "relUrl": "/submenu/js-trial-and-error",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "My First Notebook",
            "content": "Welcome to... my FIRST NOTEBOOK! . WOAH IS THAT PYTHON? . print(&quot;YES IT IS!!!&quot;) . YES IT IS!!! .",
            "url": "https://h4seeb-cmd.github.io/turtle/fastpages/jupyter/week%200/2022/09/15/first-notebook.html",
            "relUrl": "/fastpages/jupyter/week%200/2022/09/15/first-notebook.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Happy Essay",
            "content": ". layout: post — .",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/09/15/Happy-Essay.html",
            "relUrl": "/2022/09/15/Happy-Essay.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "College Board Performance Task Brainstorming",
            "content": "DISCLAIMER: IDEAS SUBJECT TO CHANGE . Idea 1: Working Calculator . Task Outline/Desc. . I was thinking about making an online calculator that can handle equations. It would also play nice, calming music in the background. It would also be cool if I could add a function to let the user play their own songs on the site by linking it to spotify. The equations . College Board Requirements . Program Purpose and Function . The purpose of this calculator is to assist people with mathematical calculations. The calculator will be robust, and the site will work seamlessly, to provide the user with the best experience possible. . Data Abstraction . The data that will be stored is the integers inputed by the user. Once they hit the calculate button, the code will compile the user data and calculate the output. Additionally, the site will allow users to sign into their spotify. It will use this information to let the user play whatever song they want on the site, provided they sign in. . Managing Complexity . Ideally, my calculator should be able to calculate semi-complex equations using order of operations and print out the output. Adding the order of operations into the mix would spike up the complexity of the code. Additionally, the option to sign in to a Spotify account and play music would prove to be quite complex as well. . Procedural Abstraction . The code will abstract user data from what they inputted, and it will also collect the user’s Spotify details so that they can access their music playlists and play songs from the website UI. This will make the calculator more personalized, and it would add another level of depth to the project. . Algorithm Implementation . The main algorithm in this website would work to calculate the solution to the equations users would input. There will be a secondary algorithm that will pull user data in order to let them access their Spotify from the calculator. . Testing . In order to test my idea, I will screen record myself going through every function. . Learning Preperation . In order to create this idea, I need to learn about: . Integrations with other sites | How to implement an order to the code’s math | How to further customize webpages | . Ideas . Fallback ideas if the calculator project hits the fan: . More refined quiz game | 2-D platfoming game | .",
            "url": "https://h4seeb-cmd.github.io/turtle/markdown/week%203/2022/09/12/CollegeBoardPerformaceTaskOutline.html",
            "relUrl": "/markdown/week%203/2022/09/12/CollegeBoardPerformaceTaskOutline.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Hello World",
            "content": "Ideas for My Quiz (9/9/22) . Short, text based questions. | Mix CS questions with some other, random questions. | A quiz about CS vocab? | A math quiz? | . My Plan for How I Would Make My Quiz (9/9/22) . Have a question on the top, have a box where user types answer. | If correct, lead to a correct screen and vice versa. | Keep score by using variables. | At the end, display the score the user obtained. | . Completed Tangible (9/11/22) . As of the date, the quiz is now complete: https://studio.code.org/projects/applab/byjBO37c2ri4OQLnzNk4YrF40bVfgn9oxhQbJa8_aRg. I added a mix bag of questions that vary from CS terminology to mathematical questions. Some challenges I faced while working were: . Not having my score tallied correctly at the end card | Hitting submit indiscriminately sent you to the correct screen, regardless of answer | Suffering from organizational issues | . In order to overcome these challenges, I had to do lots of debugging. For one, I labled most of the components in my quiz, as my lack of organization really started to weigh me down later on. In order to fix the submit button only sending you to the correct screen, I had to use the getText code to run a check through the user input. . Improvements I Should Keep in Mind for the Future . Some things I could have done better were: . Make the quiz more visually appealing | Manage my work time better | Write better, more robust code | . Thoughts on AppLab . I feel like AppLab is a great concept and tool for those taking their first steps into CS, but I feel like because it’s not using an actual language, there’s not a lot of room for going above and beyond. Looking for ways to improve my code, and advice as to how to do certain things online was nigh impossible, as there isn’t too much documentation on the way AppLab works at a higher level. At the end of the day, this feels like a Dollar Tree, less robust version of Scratch. .",
            "url": "https://h4seeb-cmd.github.io/turtle/markdown/week%203/2022/09/09/App-Lab-Planning.html",
            "relUrl": "/markdown/week%203/2022/09/09/App-Lab-Planning.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Welcome!",
            "content": "Row 3, Managing Complexity . Always try to plan a way to make the code less complex. Be a “lazy programmer” . Row 5, Algortithm Implementation . Algorithm- Code that does things. . Row 6, Testing . Make sure to test your code. Test different possibilities and fix the code acoordingly. Before turning your work in, make sure to test. .",
            "url": "https://h4seeb-cmd.github.io/turtle/markdown/2022/09/08/CollegeBoardLecture.html",
            "relUrl": "/markdown/2022/09/08/CollegeBoardLecture.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Changing My Theme",
            "content": "My Theme Changing Experience . I was wondering what Turtle would look like under a new coat of paint, and I decided that I wanted to try out a new theme! I ended up choosing the theme Midnight, and this is how it turned out: . . I noticed that my home page broke, and all my subpages were gone. The font changed and on top of that, I had to hide all my custom css to get the layout to function. It added some new text that wasn’t there before and the color scheme completely changed. .",
            "url": "https://h4seeb-cmd.github.io/turtle/markdown/week%202/2022/09/05/theme-change.html",
            "relUrl": "/markdown/week%202/2022/09/05/theme-change.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Title",
            "content": "Changing My Theme .",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/09/05/change_theme.html",
            "relUrl": "/2022/09/05/change_theme.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "My Team",
            "content": "My Team . About Us! . toc:true- branch: master | layout: post | badges: true | comments: true | author: Haseeb Beg | categories: [fastpages, jupyter, Week 2] | . Team_Info = [] Team_Info.append({ &quot;First_Name&quot;: &quot;Mirza&quot;, &quot;Middle_Initial&quot;: &quot;H.&quot;, &quot;Last_Name&quot;: &quot;Beg&quot;, &quot;Date_of_Birth&quot;: &quot;December 6th, 2007&quot;, &quot;Grade&quot;: &quot;10th&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;mirzahbeg123@gmail.com&quot;, &quot;Likes&quot;: [&quot;Video Games&quot;, &quot;Coding&quot;, &quot;Working Out&quot;,] }) Team_Info.append({ &quot;First_Name&quot;: &quot;Tirth&quot;, &quot;Middle_Initial&quot;: &quot;S.&quot;, &quot;Last_Name&quot;: &quot;Thakkar&quot;, &quot;Date_of_Birth&quot;: &quot;December 26th, 2005&quot;, &quot;Grade&quot;: &quot;11th&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;tirth1226@gmail.com&quot;, &quot;Likes&quot;: [&quot;Reading&quot;, &quot;Board Games&quot;,] }) Team_Info.reverse() print(Team_Info) . [{&#39;First_Name&#39;: &#39;Tirth&#39;, &#39;Middle_Initial&#39;: &#39;S.&#39;, &#39;Last_Name&#39;: &#39;Thakkar&#39;, &#39;Date_of_Birth&#39;: &#39;December 26th, 2005&#39;, &#39;Grade&#39;: &#39;11th&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;tirth1226@gmail.com&#39;, &#39;Likes&#39;: [&#39;Reading&#39;, &#39;Board Games&#39;]}, {&#39;First_Name&#39;: &#39;Mirza&#39;, &#39;Middle_Initial&#39;: &#39;H.&#39;, &#39;Last_Name&#39;: &#39;Beg&#39;, &#39;Date_of_Birth&#39;: &#39;December 6th, 2007&#39;, &#39;Grade&#39;: &#39;10th&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;mirzahbeg123@gmail.com&#39;, &#39;Likes&#39;: [&#39;Video Games&#39;, &#39;Coding&#39;, &#39;Working Out&#39;]}] . def print_data(d_rec): print(&quot; x1b[1;93m&quot;, d_rec[&quot;First_Name&quot;], d_rec[&quot;Middle_Initial&quot;], d_rec[&quot;Last_Name&quot;], &quot; x1b[0m&quot;) print(&quot;&quot;) print(&quot; t&quot;, &quot; x1b[3;96m&quot;, &quot;Grade: &quot;, d_rec[&quot;Grade&quot;], &quot; x1b[0m&quot;) print(&quot;&quot;) print(&quot; t&quot;, &quot; x1b[3;94m&quot;, &quot;Birthday:&quot;, d_rec[&quot;Date_of_Birth&quot;], &quot; x1b[0m&quot;) print(&quot;&quot;) print(&quot; t&quot;, &quot; x1b[3;96m&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;], &quot; x1b[0m&quot;) print(&quot;&quot;) print(&quot; t&quot;, &quot; x1b[3;94m&quot;, &quot;Interests:&quot;, d_rec[&quot;Likes&quot;], &quot; x1b[0m&quot;) print(&quot;&quot;) print(&quot; t&quot;, &quot; x1b[3;96m&quot;, &quot;Contact Info:&quot;, d_rec[&quot;Email&quot;], &quot; x1b[0m&quot;) print() # for loop algorithm iterates on length of InfoDb def for_loop(): for record in Team_Info: print_data(record) for_loop() . Tirth S. Thakkar Grade: 11th Birthday: December 26th, 2005 Residence: San Diego Interests: [&#39;Reading&#39;, &#39;Board Games&#39;] Contact Info: tirth1226@gmail.com Mirza H. Beg Grade: 10th Birthday: December 6th, 2007 Residence: San Diego Interests: [&#39;Video Games&#39;, &#39;Coding&#39;, &#39;Working Out&#39;] Contact Info: mirzahbeg123@gmail.com .",
            "url": "https://h4seeb-cmd.github.io/turtle/2022/09/05/My-Team.html",
            "relUrl": "/2022/09/05/My-Team.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | examplelist = [&quot;hola,&quot;, &quot;como estas?&quot;] print (&quot;examplelist&quot;, examplelist, type(examplelist), &quot;length&quot;, len(examplelist)) print(&quot;- examplelist[0]&quot;, examplelist[0], type(examplelist[1])) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;HTML&quot;, &quot;C++&quot;, &quot;C&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) . examplelist [&#39;hola,&#39;, &#39;como estas?&#39;] &lt;class &#39;list&#39;&gt; length 2 - examplelist[0] hola, &lt;class &#39;str&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;HTML&#39;, &#39;C++&#39;, &#39;C&#39;] &lt;class &#39;list&#39;&gt; length 7 - langs[0] Python &lt;class &#39;str&#39;&gt; . name = &quot;MORT&quot; print(&quot;What is the variable value?&quot;, name) . What is the variable value? MORT . # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Haseeb B&quot; print(&quot;name&quot;, name, type(name)) print() 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222 # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 14 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 420 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;HTML&quot;, &quot;C++&quot;, &quot;C&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;Haseeb&quot;: name, &quot;14&quot;: age, &quot;420&quot;: score, &quot;engrish&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) . What is the variable name/key? value? type? primitive or collection, why? name Haseeb B &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 14 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 420 &lt;class &#39;int&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;HTML&#39;, &#39;C++&#39;, &#39;C&#39;] &lt;class &#39;list&#39;&gt; length 7 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;Haseeb&#39;: &#39;Haseeb B&#39;, &#39;14&#39;: 14, &#39;420&#39;: 420, &#39;engrish&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;HTML&#39;, &#39;C++&#39;, &#39;C&#39;]} &lt;class &#39;dict&#39;&gt; length 4 . Notes . Change up the categories on front matter. | Organize website better. | . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;GPA&quot;: &quot;4&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;GPA&quot;: &quot;Over 9000&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;GPA&#39;: &#39;4&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;GPA&#39;: &#39;Over 9000&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;GPA:&quot;, d_rec[&quot;GPA&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 GPA: 4 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 GPA: Over 9000 Cars: 4Runner . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 GPA: 4 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 GPA: Over 9000 Cars: 4Runner . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 GPA: 4 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 GPA: Over 9000 Cars: 4Runner . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://h4seeb-cmd.github.io/turtle/lecture/python_lists_lecture",
            "relUrl": "/lecture/python_lists_lecture",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Tool Install Check",
            "content": "Conda Check . %%bash conda list . # packages in environment at /home/h4seeb/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . %%bash echo &quot;Conda Check&quot; test=&quot;jupyter&quot; check=`conda list | grep $test` n=${#check} if [[ {n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Check . %%bash jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/h4seeb/.local/share/jupyter/kernels/bash javascript /home/h4seeb/.local/share/jupyter/kernels/javascript python3 /home/h4seeb/.local/share/jupyter/kernels/python3 . %%bash test=&quot;python3&quot; check=`jupyter kernelspec list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . python3 /home/h4seeb/.local/share/jupyter/kernels/python3 . Python Check . %%bash python --version python2 --version . Python 3.9.12 . Python 2.7.18 .",
            "url": "https://h4seeb-cmd.github.io/turtle/fastpages/jupyter/week%201/2022/08/28/tool-check.html",
            "relUrl": "/fastpages/jupyter/week%201/2022/08/28/tool-check.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "LECTURE 3",
            "content": "Notes . You can remotely git pull using bash. | Make your own toolsCheck page. | . export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/turtle # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/h4seeb-cmd/turtle.git&quot; # change to project of choice .",
            "url": "https://h4seeb-cmd.github.io/turtle/lecture/bashlecture",
            "relUrl": "/lecture/bashlecture",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "LECTURE 2",
            "content": "NOTES . Make a google doc, put it on docx, then proceed to somehow organize it in the blog. . | In front matter, there is a key and a value. . Ex:branch: master (branch is the key master is the value.) . | If key is present you MUST have a value. . | Go to _pages to add/edit subpages. . ie:About Me . | Special key known as site.baseurl. If you add curly brackets on it you can make a directory to a file. . | Secrets are in _config.yml, you can add images there. . | In config.yml, you can make show_image: true and you can now add images to posts. . to add an img to a post, do /image:{insert image link here, it should start with /images} . | .",
            "url": "https://h4seeb-cmd.github.io/turtle/lecture/vscodelecture",
            "relUrl": "/lecture/vscodelecture",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Quiz Time",
            "content": "import getpass, sys QUESTIONS = { &quot;What is used to create parameters in Python?&quot;: [ &quot;def&quot;, &quot;define&quot; ], &quot;Where are the secrets stored in your VSCode?&quot;: [ &quot;_config.yml&quot;, &quot;config.yml&quot;, &quot;config&quot; ], &quot;True or false: We can use docx files in our Fastpages site?&quot;: [ &quot;true&quot;, &quot;false&quot;, &quot;what in the world is docx?&quot; ], &quot;True or false: Static Text often changes when you run code&quot;: [ &quot;false&quot;, &quot;true&quot;, &quot;idk&quot; ], &quot;True or false: A sequence of code is only used on the AP exam and it is used to refer to mulitple lines of code&quot;: [ &quot;false&quot;, &quot;true&quot;, &quot;what&#39;s a sequence?&quot; ], &quot;Can we get an A in this class AND keep our sanity?&quot;: [ &quot;no&quot;, &quot;yes&quot;, &quot;maybe&quot; ], &quot;What is the syntax for remotely opening a file in VSCode from Terminal?&quot;: [ &quot;code .&quot;, &quot;Code.&quot;, &quot;. Code&quot; &quot;code.&quot; ], &quot;What do we call the defining parameters we set at the top of a markdown file or jupyter notebook?&quot;: [ &quot;front matter&quot;, &quot;define&quot; ], &quot;What is the name of the piece of code that lets you access and bring in other people&#39;s code?&quot;: [ &quot;import&quot;, &quot;port&quot;, &quot;rejuvenate&quot; ], &quot;What is the teacher&#39;s social security number?&quot;: [ &quot;how is that relevant&quot;, &quot;idk&quot;, &quot;why is this even a question&quot;, &quot;5014&quot; ], } for question, alternatives in QUESTIONS.items(): correct_answer = alternatives[0] for alternative in sorted(alternatives): print(f&quot; - {alternative}&quot;) answer = input(f&quot;{question}? &quot;) if answer == correct_answer: print(&quot;yay you got it right! here&#39;s your bronze medal!&quot;) else: print(f&quot;LOL imagine getting it wrong. The correct answer was {correct_answer!r}, not {answer!r}&quot;) . - def - define yay you got it right! here&#39;s your bronze medal! - _config.yml - config - config.yml LOL imagine getting it wrong. The correct answer was &#39;_config.yml&#39;, not &#39;idk&#39; - false - true - what in the world is docx? LOL imagine getting it wrong. The correct answer was &#39;true&#39;, not &#39;&#39; - false - idk - true LOL imagine getting it wrong. The correct answer was &#39;false&#39;, not &#39;&#39; - false - true - what&#39;s a sequence? LOL imagine getting it wrong. The correct answer was &#39;false&#39;, not &#39;&#39; - maybe - no - yes LOL imagine getting it wrong. The correct answer was &#39;no&#39;, not &#39;&#39; - . Codecode. - Code. - code . LOL imagine getting it wrong. The correct answer was &#39;code .&#39;, not &#39;&#39; - define - front matter LOL imagine getting it wrong. The correct answer was &#39;front matter&#39;, not &#39;&#39; - import - port - rejuvenate LOL imagine getting it wrong. The correct answer was &#39;import&#39;, not &#39;&#39; - 5014 - how is that relevant - idk - why is this even a question LOL imagine getting it wrong. The correct answer was &#39;how is that relevant&#39;, not &#39;&#39; .",
            "url": "https://h4seeb-cmd.github.io/turtle/fastpages/jupyter/week%201/2022/08/23/quiz-time.html",
            "relUrl": "/fastpages/jupyter/week%201/2022/08/23/quiz-time.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "LECTURE 1",
            "content": "Notes . -def = define, used to create parameters and functions in python. . -sequence = college board vocab for many lines of code in an order. . -static text = text that doesn&#39;t change. . ex:print(&quot;helloWorld&quot;) &gt; in this case, helloWorld is the static text, it doesn&#39;t change. . -import = imports commands that other people develop. . ex:import getpass sys -if statements are used in python to evaluate a correct or incorrect response. ex:if rsp == &quot;2&quot;&gt; print (rsp + &quot; is right!&quot;) correct += 1 else:print(rsp + &quot; is WRONG! :&lt; &quot;) -rsp is used in if statements, represents &quot;response&quot; .",
            "url": "https://h4seeb-cmd.github.io/turtle/lecture/pythonintrolecture",
            "relUrl": "/lecture/pythonintrolecture",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Welcome!",
            "content": "Hello World! . This is my very first blog post on this website! My name is Haseeb Beg, and I can’t wait to learn more about CS! . My Interests . I have a lot of things I like to do, some of them are: . Music Production 🎹 | Working Out 💪 | Gaming 🎮 | . Thanks For Reading! . Comment down below if you have any suggestions as to how I could improve my blog! .",
            "url": "https://h4seeb-cmd.github.io/turtle/markdown/2022/08/21/turtle-egg.html",
            "relUrl": "/markdown/2022/08/21/turtle-egg.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://h4seeb-cmd.github.io/turtle/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Class Lectures",
          "content": "All the class lectures: . Lecture Date Lecture Lecture topic . 08-30-22 | Lecture 4 | Python Lists | . 08-25-22 | Lecture 3 | Bash | . 08-24-22 | Lecture 2 | VSCode | . 08-23-22 | Lecture 1 | Intro to Python | .",
          "url": "https://h4seeb-cmd.github.io/turtle/lectures/",
          "relUrl": "/lectures/",
          "date": ""
      }
      
  

  
  

  

  
  

  
      ,"page7": {
          "title": "Work Sprints",
          "content": "Work Sprints: . Sprint # Review Ticket . Sprint 2 | SReview Ticket | . Sprint 1 | Review Ticket | . Sprint 0 | Review Ticket | .",
          "url": "https://h4seeb-cmd.github.io/turtle/sprints/",
          "relUrl": "/sprints/",
          "date": ""
      }
      
  

  
      ,"page8": {
          "title": "Submenu2",
          "content": "JS Table | API Usage | Link 3 | . .",
          "url": "https://h4seeb-cmd.github.io/turtle/submenu/",
          "relUrl": "/submenu/",
          "date": ""
      }
      
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://h4seeb-cmd.github.io/turtle/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}